// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.25.3
// source: pkg/plugin/proto/plugin.proto

package golang

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Default     string `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool   `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Flag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Flag) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description        string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Flags              []*Flag           `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty"`
	DefaultPreferences []*PreferenceItem `protobuf:"bytes,4,rep,name=default_preferences,json=defaultPreferences,proto3" json:"default_preferences,omitempty"`
	LoginRequired      bool              `protobuf:"varint,5,opt,name=login_required,json=loginRequired,proto3" json:"login_required,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Command) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Command) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Command) GetDefaultPreferences() []*PreferenceItem {
	if x != nil {
		return x.DefaultPreferences
	}
	return nil
}

func (x *Command) GetLoginRequired() bool {
	if x != nil {
		return x.LoginRequired
	}
	return false
}

type RegisterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version         string           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Provider        string           `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Commands        []*Command       `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty"`
	MinKaytuVersion string           `protobuf:"bytes,5,opt,name=min_kaytu_version,json=minKaytuVersion,proto3" json:"min_kaytu_version,omitempty"`
	OverviewChart   *ChartDefinition `protobuf:"bytes,6,opt,name=overview_chart,json=overviewChart,proto3" json:"overview_chart,omitempty"`
	DevicesChart    *ChartDefinition `protobuf:"bytes,7,opt,name=devices_chart,json=devicesChart,proto3" json:"devices_chart,omitempty"`
}

func (x *RegisterConfig) Reset() {
	*x = RegisterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConfig) ProtoMessage() {}

func (x *RegisterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConfig.ProtoReflect.Descriptor instead.
func (*RegisterConfig) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisterConfig) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RegisterConfig) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RegisterConfig) GetMinKaytuVersion() string {
	if x != nil {
		return x.MinKaytuVersion
	}
	return ""
}

func (x *RegisterConfig) GetOverviewChart() *ChartDefinition {
	if x != nil {
		return x.OverviewChart
	}
	return nil
}

func (x *RegisterConfig) GetDevicesChart() *ChartDefinition {
	if x != nil {
		return x.DevicesChart
	}
	return nil
}

type ChartRowItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChartRowItem) Reset() {
	*x = ChartRowItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartRowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartRowItem) ProtoMessage() {}

func (x *ChartRowItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartRowItem.ProtoReflect.Descriptor instead.
func (*ChartRowItem) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *ChartRowItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ChartRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowId  string                   `protobuf:"bytes,1,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	Values map[string]*ChartRowItem `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Column Id -> Item
}

func (x *ChartRow) Reset() {
	*x = ChartRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartRow) ProtoMessage() {}

func (x *ChartRow) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartRow.ProtoReflect.Descriptor instead.
func (*ChartRow) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *ChartRow) GetRowId() string {
	if x != nil {
		return x.RowId
	}
	return ""
}

func (x *ChartRow) GetValues() map[string]*ChartRowItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type ChartColumnItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Width uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *ChartColumnItem) Reset() {
	*x = ChartColumnItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartColumnItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartColumnItem) ProtoMessage() {}

func (x *ChartColumnItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartColumnItem.ProtoReflect.Descriptor instead.
func (*ChartColumnItem) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *ChartColumnItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChartColumnItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartColumnItem) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type ChartDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*ChartColumnItem `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *ChartDefinition) Reset() {
	*x = ChartDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDefinition) ProtoMessage() {}

func (x *ChartDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDefinition.ProtoReflect.Descriptor instead.
func (*ChartDefinition) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *ChartDefinition) GetColumns() []*ChartColumnItem {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type JobResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	Done           bool   `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult.ProtoReflect.Descriptor instead.
func (*JobResult) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *JobResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JobResult) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *JobResult) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Current     string `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Average     string `protobuf:"bytes,3,opt,name=average,proto3" json:"average,omitempty"`
	Max         string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Recommended string `protobuf:"bytes,5,opt,name=recommended,proto3" json:"recommended,omitempty"`
	Hidden      bool   `protobuf:"varint,6,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *Property) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Property) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *Property) GetAverage() string {
	if x != nil {
		return x.Average
	}
	return ""
}

func (x *Property) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *Property) GetRecommended() string {
	if x != nil {
		return x.Recommended
	}
	return ""
}

func (x *Property) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*Property `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Properties) Reset() {
	*x = Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Properties) ProtoMessage() {}

func (x *Properties) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Properties.ProtoReflect.Descriptor instead.
func (*Properties) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *Properties) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId       string      `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ResourceType   string      `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Runtime        string      `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	CurrentCost    float64     `protobuf:"fixed64,4,opt,name=current_cost,json=currentCost,proto3" json:"current_cost,omitempty"`
	RightSizedCost float64     `protobuf:"fixed64,5,opt,name=right_sized_cost,json=rightSizedCost,proto3" json:"right_sized_cost,omitempty"`
	Properties     []*Property `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *Device) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Device) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Device) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Device) GetCurrentCost() float64 {
	if x != nil {
		return x.CurrentCost
	}
	return 0
}

func (x *Device) GetRightSizedCost() float64 {
	if x != nil {
		return x.RightSizedCost
	}
	return 0
}

func (x *Device) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PreferenceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service        string                  `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Key            string                  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Alias          string                  `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	IsNumber       bool                    `protobuf:"varint,4,opt,name=is_number,json=isNumber,proto3" json:"is_number,omitempty"`
	Value          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	PossibleValues []string                `protobuf:"bytes,6,rep,name=possible_values,json=possibleValues,proto3" json:"possible_values,omitempty"`
	Pinned         bool                    `protobuf:"varint,7,opt,name=pinned,proto3" json:"pinned,omitempty"`
	PreventPinning bool                    `protobuf:"varint,8,opt,name=prevent_pinning,json=preventPinning,proto3" json:"prevent_pinning,omitempty"`
	Unit           string                  `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *PreferenceItem) Reset() {
	*x = PreferenceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreferenceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferenceItem) ProtoMessage() {}

func (x *PreferenceItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferenceItem.ProtoReflect.Descriptor instead.
func (*PreferenceItem) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *PreferenceItem) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PreferenceItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PreferenceItem) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PreferenceItem) GetIsNumber() bool {
	if x != nil {
		return x.IsNumber
	}
	return false
}

func (x *PreferenceItem) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PreferenceItem) GetPossibleValues() []string {
	if x != nil {
		return x.PossibleValues
	}
	return nil
}

func (x *PreferenceItem) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *PreferenceItem) GetPreventPinning() bool {
	if x != nil {
		return x.PreventPinning
	}
	return false
}

func (x *PreferenceItem) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type OptimizationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceType       string            `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Region             string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Platform           string            `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Devices            []*Device         `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty"`
	Preferences        []*PreferenceItem `protobuf:"bytes,7,rep,name=preferences,proto3" json:"preferences,omitempty"`
	Description        string            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Loading            bool              `protobuf:"varint,9,opt,name=loading,proto3" json:"loading,omitempty"`
	Skipped            bool              `protobuf:"varint,10,opt,name=skipped,proto3" json:"skipped,omitempty"`
	SkipReason         string            `protobuf:"bytes,11,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	LazyLoadingEnabled bool              `protobuf:"varint,12,opt,name=lazy_loading_enabled,json=lazyLoadingEnabled,proto3" json:"lazy_loading_enabled,omitempty"`
}

func (x *OptimizationItem) Reset() {
	*x = OptimizationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizationItem) ProtoMessage() {}

func (x *OptimizationItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizationItem.ProtoReflect.Descriptor instead.
func (*OptimizationItem) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{13}
}

func (x *OptimizationItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OptimizationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptimizationItem) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *OptimizationItem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *OptimizationItem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *OptimizationItem) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *OptimizationItem) GetPreferences() []*PreferenceItem {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *OptimizationItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OptimizationItem) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

func (x *OptimizationItem) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *OptimizationItem) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *OptimizationItem) GetLazyLoadingEnabled() bool {
	if x != nil {
		return x.LazyLoadingEnabled
	}
	return false
}

type ChartOptimizationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverviewChartRow   *ChartRow               `protobuf:"bytes,1,opt,name=overview_chart_row,json=overviewChartRow,proto3" json:"overview_chart_row,omitempty"`
	Preferences        []*PreferenceItem       `protobuf:"bytes,2,rep,name=preferences,proto3" json:"preferences,omitempty"`
	Loading            bool                    `protobuf:"varint,3,opt,name=loading,proto3" json:"loading,omitempty"`
	Skipped            bool                    `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	SkipReason         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	LazyLoadingEnabled bool                    `protobuf:"varint,6,opt,name=lazy_loading_enabled,json=lazyLoadingEnabled,proto3" json:"lazy_loading_enabled,omitempty"`
	Description        string                  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	DevicesChartRows   []*ChartRow             `protobuf:"bytes,8,rep,name=devices_chart_rows,json=devicesChartRows,proto3" json:"devices_chart_rows,omitempty"`
	DevicesProperties  map[string]*Properties  `protobuf:"bytes,9,rep,name=devices_properties,json=devicesProperties,proto3" json:"devices_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Device Row id -> Row properties
}

func (x *ChartOptimizationItem) Reset() {
	*x = ChartOptimizationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartOptimizationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartOptimizationItem) ProtoMessage() {}

func (x *ChartOptimizationItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartOptimizationItem.ProtoReflect.Descriptor instead.
func (*ChartOptimizationItem) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{14}
}

func (x *ChartOptimizationItem) GetOverviewChartRow() *ChartRow {
	if x != nil {
		return x.OverviewChartRow
	}
	return nil
}

func (x *ChartOptimizationItem) GetPreferences() []*PreferenceItem {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *ChartOptimizationItem) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

func (x *ChartOptimizationItem) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ChartOptimizationItem) GetSkipReason() *wrapperspb.StringValue {
	if x != nil {
		return x.SkipReason
	}
	return nil
}

func (x *ChartOptimizationItem) GetLazyLoadingEnabled() bool {
	if x != nil {
		return x.LazyLoadingEnabled
	}
	return false
}

func (x *ChartOptimizationItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChartOptimizationItem) GetDevicesChartRows() []*ChartRow {
	if x != nil {
		return x.DevicesChartRows
	}
	return nil
}

func (x *ChartOptimizationItem) GetDevicesProperties() map[string]*Properties {
	if x != nil {
		return x.DevicesProperties
	}
	return nil
}

type ResultsReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ResultsReady) Reset() {
	*x = ResultsReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsReady) ProtoMessage() {}

func (x *ResultsReady) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsReady.ProtoReflect.Descriptor instead.
func (*ResultsReady) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{15}
}

func (x *ResultsReady) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type UpdateChartDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverviewChart *ChartDefinition `protobuf:"bytes,1,opt,name=overview_chart,json=overviewChart,proto3" json:"overview_chart,omitempty"`
	DevicesChart  *ChartDefinition `protobuf:"bytes,2,opt,name=devices_chart,json=devicesChart,proto3" json:"devices_chart,omitempty"`
}

func (x *UpdateChartDefinition) Reset() {
	*x = UpdateChartDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChartDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChartDefinition) ProtoMessage() {}

func (x *UpdateChartDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChartDefinition.ProtoReflect.Descriptor instead.
func (*UpdateChartDefinition) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateChartDefinition) GetOverviewChart() *ChartDefinition {
	if x != nil {
		return x.OverviewChart
	}
	return nil
}

func (x *UpdateChartDefinition) GetDevicesChart() *ChartDefinition {
	if x != nil {
		return x.DevicesChart
	}
	return nil
}

type PluginMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PluginMessage:
	//	*PluginMessage_Job
	//	*PluginMessage_Oi
	//	*PluginMessage_Conf
	//	*PluginMessage_Err
	//	*PluginMessage_Ready
	//	*PluginMessage_Coi
	//	*PluginMessage_UpdateChart
	PluginMessage isPluginMessage_PluginMessage `protobuf_oneof:"plugin_message"`
}

func (x *PluginMessage) Reset() {
	*x = PluginMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginMessage) ProtoMessage() {}

func (x *PluginMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginMessage.ProtoReflect.Descriptor instead.
func (*PluginMessage) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{17}
}

func (m *PluginMessage) GetPluginMessage() isPluginMessage_PluginMessage {
	if m != nil {
		return m.PluginMessage
	}
	return nil
}

func (x *PluginMessage) GetJob() *JobResult {
	if x, ok := x.GetPluginMessage().(*PluginMessage_Job); ok {
		return x.Job
	}
	return nil
}

func (x *PluginMessage) GetOi() *OptimizationItem {
	if x, ok := x.GetPluginMessage().(*PluginMessage_Oi); ok {
		return x.Oi
	}
	return nil
}

func (x *PluginMessage) GetConf() *RegisterConfig {
	if x, ok := x.GetPluginMessage().(*PluginMessage_Conf); ok {
		return x.Conf
	}
	return nil
}

func (x *PluginMessage) GetErr() *Error {
	if x, ok := x.GetPluginMessage().(*PluginMessage_Err); ok {
		return x.Err
	}
	return nil
}

func (x *PluginMessage) GetReady() *ResultsReady {
	if x, ok := x.GetPluginMessage().(*PluginMessage_Ready); ok {
		return x.Ready
	}
	return nil
}

func (x *PluginMessage) GetCoi() *ChartOptimizationItem {
	if x, ok := x.GetPluginMessage().(*PluginMessage_Coi); ok {
		return x.Coi
	}
	return nil
}

func (x *PluginMessage) GetUpdateChart() *UpdateChartDefinition {
	if x, ok := x.GetPluginMessage().(*PluginMessage_UpdateChart); ok {
		return x.UpdateChart
	}
	return nil
}

type isPluginMessage_PluginMessage interface {
	isPluginMessage_PluginMessage()
}

type PluginMessage_Job struct {
	Job *JobResult `protobuf:"bytes,1,opt,name=job,proto3,oneof"`
}

type PluginMessage_Oi struct {
	Oi *OptimizationItem `protobuf:"bytes,2,opt,name=oi,proto3,oneof"`
}

type PluginMessage_Conf struct {
	Conf *RegisterConfig `protobuf:"bytes,3,opt,name=conf,proto3,oneof"`
}

type PluginMessage_Err struct {
	Err *Error `protobuf:"bytes,4,opt,name=err,proto3,oneof"`
}

type PluginMessage_Ready struct {
	Ready *ResultsReady `protobuf:"bytes,5,opt,name=ready,proto3,oneof"`
}

type PluginMessage_Coi struct {
	Coi *ChartOptimizationItem `protobuf:"bytes,6,opt,name=coi,proto3,oneof"`
}

type PluginMessage_UpdateChart struct {
	UpdateChart *UpdateChartDefinition `protobuf:"bytes,7,opt,name=update_chart,json=updateChart,proto3,oneof"`
}

func (*PluginMessage_Job) isPluginMessage_PluginMessage() {}

func (*PluginMessage_Oi) isPluginMessage_PluginMessage() {}

func (*PluginMessage_Conf) isPluginMessage_PluginMessage() {}

func (*PluginMessage_Err) isPluginMessage_PluginMessage() {}

func (*PluginMessage_Ready) isPluginMessage_PluginMessage() {}

func (*PluginMessage_Coi) isPluginMessage_PluginMessage() {}

func (*PluginMessage_UpdateChart) isPluginMessage_PluginMessage() {}

type ReEvaluate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Preferences []*PreferenceItem `protobuf:"bytes,2,rep,name=preferences,proto3" json:"preferences,omitempty"`
}

func (x *ReEvaluate) Reset() {
	*x = ReEvaluate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEvaluate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEvaluate) ProtoMessage() {}

func (x *ReEvaluate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEvaluate.ProtoReflect.Descriptor instead.
func (*ReEvaluate) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{18}
}

func (x *ReEvaluate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReEvaluate) GetPreferences() []*PreferenceItem {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type StartProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command          string            `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Flags            map[string]string `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KaytuAccessToken string            `protobuf:"bytes,3,opt,name=kaytu_access_token,json=kaytuAccessToken,proto3" json:"kaytu_access_token,omitempty"`
}

func (x *StartProcess) Reset() {
	*x = StartProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcess) ProtoMessage() {}

func (x *StartProcess) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcess.ProtoReflect.Descriptor instead.
func (*StartProcess) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{19}
}

func (x *StartProcess) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *StartProcess) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *StartProcess) GetKaytuAccessToken() string {
	if x != nil {
		return x.KaytuAccessToken
	}
	return ""
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ServerMessage:
	//	*ServerMessage_ReEvaluate
	//	*ServerMessage_Start
	ServerMessage isServerMessage_ServerMessage `protobuf_oneof:"server_message"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_plugin_proto_plugin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_pkg_plugin_proto_plugin_proto_rawDescGZIP(), []int{20}
}

func (m *ServerMessage) GetServerMessage() isServerMessage_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *ServerMessage) GetReEvaluate() *ReEvaluate {
	if x, ok := x.GetServerMessage().(*ServerMessage_ReEvaluate); ok {
		return x.ReEvaluate
	}
	return nil
}

func (x *ServerMessage) GetStart() *StartProcess {
	if x, ok := x.GetServerMessage().(*ServerMessage_Start); ok {
		return x.Start
	}
	return nil
}

type isServerMessage_ServerMessage interface {
	isServerMessage_ServerMessage()
}

type ServerMessage_ReEvaluate struct {
	ReEvaluate *ReEvaluate `protobuf:"bytes,1,opt,name=re_evaluate,json=reEvaluate,proto3,oneof"`
}

type ServerMessage_Start struct {
	Start *StartProcess `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

func (*ServerMessage_ReEvaluate) isServerMessage_ServerMessage() {}

func (*ServerMessage_Start) isServerMessage_ServerMessage() {}

var File_pkg_plugin_proto_plugin_proto protoreflect.FileDescriptor

var file_pkg_plugin_proto_plugin_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xcc, 0x02, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x61,
	0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4b,
	0x61, 0x79, 0x74, 0x75, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x61,
	0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x22, 0x24, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x4d, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x09, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xec, 0x01,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa1, 0x02, 0x0a,
	0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x22, 0xae, 0x03, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x79,
	0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c,
	0x61, 0x7a, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x84, 0x05, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x77, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x79, 0x74,
	0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61,
	0x7a, 0x79, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x61, 0x7a, 0x79, 0x4c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x61, 0x79,
	0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x6f, 0x77, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x6c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0xa7,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x0d, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6a, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x33, 0x0a, 0x02, 0x6f, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x69, 0x12,
	0x35, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6f, 0x69,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x03, 0x63, 0x6f, 0x69, 0x12, 0x4b, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x61,
	0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x0a, 0x52, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x61,
	0x79, 0x74, 0x75, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x38,
	0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x79, 0x74,
	0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x5a, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x50, 0x0a,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x6b, 0x61, 0x79, 0x74,
	0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x6b, 0x61, 0x79, 0x74,
	0x75, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61,
	0x79, 0x74, 0x75, 0x2d, 0x69, 0x6f, 0x2f, 0x6b, 0x61, 0x79, 0x74, 0x75, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_plugin_proto_plugin_proto_rawDescOnce sync.Once
	file_pkg_plugin_proto_plugin_proto_rawDescData = file_pkg_plugin_proto_plugin_proto_rawDesc
)

func file_pkg_plugin_proto_plugin_proto_rawDescGZIP() []byte {
	file_pkg_plugin_proto_plugin_proto_rawDescOnce.Do(func() {
		file_pkg_plugin_proto_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_plugin_proto_plugin_proto_rawDescData)
	})
	return file_pkg_plugin_proto_plugin_proto_rawDescData
}

var file_pkg_plugin_proto_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pkg_plugin_proto_plugin_proto_goTypes = []interface{}{
	(*Flag)(nil),                   // 0: kaytu.plugin.v1.Flag
	(*Command)(nil),                // 1: kaytu.plugin.v1.Command
	(*RegisterConfig)(nil),         // 2: kaytu.plugin.v1.RegisterConfig
	(*ChartRowItem)(nil),           // 3: kaytu.plugin.v1.ChartRowItem
	(*ChartRow)(nil),               // 4: kaytu.plugin.v1.ChartRow
	(*ChartColumnItem)(nil),        // 5: kaytu.plugin.v1.ChartColumnItem
	(*ChartDefinition)(nil),        // 6: kaytu.plugin.v1.ChartDefinition
	(*Error)(nil),                  // 7: kaytu.plugin.v1.Error
	(*JobResult)(nil),              // 8: kaytu.plugin.v1.JobResult
	(*Property)(nil),               // 9: kaytu.plugin.v1.Property
	(*Properties)(nil),             // 10: kaytu.plugin.v1.Properties
	(*Device)(nil),                 // 11: kaytu.plugin.v1.Device
	(*PreferenceItem)(nil),         // 12: kaytu.plugin.v1.PreferenceItem
	(*OptimizationItem)(nil),       // 13: kaytu.plugin.v1.OptimizationItem
	(*ChartOptimizationItem)(nil),  // 14: kaytu.plugin.v1.ChartOptimizationItem
	(*ResultsReady)(nil),           // 15: kaytu.plugin.v1.ResultsReady
	(*UpdateChartDefinition)(nil),  // 16: kaytu.plugin.v1.UpdateChartDefinition
	(*PluginMessage)(nil),          // 17: kaytu.plugin.v1.PluginMessage
	(*ReEvaluate)(nil),             // 18: kaytu.plugin.v1.ReEvaluate
	(*StartProcess)(nil),           // 19: kaytu.plugin.v1.StartProcess
	(*ServerMessage)(nil),          // 20: kaytu.plugin.v1.ServerMessage
	nil,                            // 21: kaytu.plugin.v1.ChartRow.ValuesEntry
	nil,                            // 22: kaytu.plugin.v1.ChartOptimizationItem.DevicesPropertiesEntry
	nil,                            // 23: kaytu.plugin.v1.StartProcess.FlagsEntry
	(*wrapperspb.StringValue)(nil), // 24: google.protobuf.StringValue
}
var file_pkg_plugin_proto_plugin_proto_depIdxs = []int32{
	0,  // 0: kaytu.plugin.v1.Command.flags:type_name -> kaytu.plugin.v1.Flag
	12, // 1: kaytu.plugin.v1.Command.default_preferences:type_name -> kaytu.plugin.v1.PreferenceItem
	1,  // 2: kaytu.plugin.v1.RegisterConfig.commands:type_name -> kaytu.plugin.v1.Command
	6,  // 3: kaytu.plugin.v1.RegisterConfig.overview_chart:type_name -> kaytu.plugin.v1.ChartDefinition
	6,  // 4: kaytu.plugin.v1.RegisterConfig.devices_chart:type_name -> kaytu.plugin.v1.ChartDefinition
	21, // 5: kaytu.plugin.v1.ChartRow.values:type_name -> kaytu.plugin.v1.ChartRow.ValuesEntry
	5,  // 6: kaytu.plugin.v1.ChartDefinition.columns:type_name -> kaytu.plugin.v1.ChartColumnItem
	9,  // 7: kaytu.plugin.v1.Properties.properties:type_name -> kaytu.plugin.v1.Property
	9,  // 8: kaytu.plugin.v1.Device.properties:type_name -> kaytu.plugin.v1.Property
	24, // 9: kaytu.plugin.v1.PreferenceItem.value:type_name -> google.protobuf.StringValue
	11, // 10: kaytu.plugin.v1.OptimizationItem.devices:type_name -> kaytu.plugin.v1.Device
	12, // 11: kaytu.plugin.v1.OptimizationItem.preferences:type_name -> kaytu.plugin.v1.PreferenceItem
	4,  // 12: kaytu.plugin.v1.ChartOptimizationItem.overview_chart_row:type_name -> kaytu.plugin.v1.ChartRow
	12, // 13: kaytu.plugin.v1.ChartOptimizationItem.preferences:type_name -> kaytu.plugin.v1.PreferenceItem
	24, // 14: kaytu.plugin.v1.ChartOptimizationItem.skip_reason:type_name -> google.protobuf.StringValue
	4,  // 15: kaytu.plugin.v1.ChartOptimizationItem.devices_chart_rows:type_name -> kaytu.plugin.v1.ChartRow
	22, // 16: kaytu.plugin.v1.ChartOptimizationItem.devices_properties:type_name -> kaytu.plugin.v1.ChartOptimizationItem.DevicesPropertiesEntry
	6,  // 17: kaytu.plugin.v1.UpdateChartDefinition.overview_chart:type_name -> kaytu.plugin.v1.ChartDefinition
	6,  // 18: kaytu.plugin.v1.UpdateChartDefinition.devices_chart:type_name -> kaytu.plugin.v1.ChartDefinition
	8,  // 19: kaytu.plugin.v1.PluginMessage.job:type_name -> kaytu.plugin.v1.JobResult
	13, // 20: kaytu.plugin.v1.PluginMessage.oi:type_name -> kaytu.plugin.v1.OptimizationItem
	2,  // 21: kaytu.plugin.v1.PluginMessage.conf:type_name -> kaytu.plugin.v1.RegisterConfig
	7,  // 22: kaytu.plugin.v1.PluginMessage.err:type_name -> kaytu.plugin.v1.Error
	15, // 23: kaytu.plugin.v1.PluginMessage.ready:type_name -> kaytu.plugin.v1.ResultsReady
	14, // 24: kaytu.plugin.v1.PluginMessage.coi:type_name -> kaytu.plugin.v1.ChartOptimizationItem
	16, // 25: kaytu.plugin.v1.PluginMessage.update_chart:type_name -> kaytu.plugin.v1.UpdateChartDefinition
	12, // 26: kaytu.plugin.v1.ReEvaluate.preferences:type_name -> kaytu.plugin.v1.PreferenceItem
	23, // 27: kaytu.plugin.v1.StartProcess.flags:type_name -> kaytu.plugin.v1.StartProcess.FlagsEntry
	18, // 28: kaytu.plugin.v1.ServerMessage.re_evaluate:type_name -> kaytu.plugin.v1.ReEvaluate
	19, // 29: kaytu.plugin.v1.ServerMessage.start:type_name -> kaytu.plugin.v1.StartProcess
	3,  // 30: kaytu.plugin.v1.ChartRow.ValuesEntry.value:type_name -> kaytu.plugin.v1.ChartRowItem
	10, // 31: kaytu.plugin.v1.ChartOptimizationItem.DevicesPropertiesEntry.value:type_name -> kaytu.plugin.v1.Properties
	17, // 32: kaytu.plugin.v1.Plugin.Register:input_type -> kaytu.plugin.v1.PluginMessage
	20, // 33: kaytu.plugin.v1.Plugin.Register:output_type -> kaytu.plugin.v1.ServerMessage
	33, // [33:34] is the sub-list for method output_type
	32, // [32:33] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_pkg_plugin_proto_plugin_proto_init() }
func file_pkg_plugin_proto_plugin_proto_init() {
	if File_pkg_plugin_proto_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_plugin_proto_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartRowItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartColumnItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreferenceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartOptimizationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChartDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEvaluate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_plugin_proto_plugin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_plugin_proto_plugin_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*PluginMessage_Job)(nil),
		(*PluginMessage_Oi)(nil),
		(*PluginMessage_Conf)(nil),
		(*PluginMessage_Err)(nil),
		(*PluginMessage_Ready)(nil),
		(*PluginMessage_Coi)(nil),
		(*PluginMessage_UpdateChart)(nil),
	}
	file_pkg_plugin_proto_plugin_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ServerMessage_ReEvaluate)(nil),
		(*ServerMessage_Start)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_plugin_proto_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_plugin_proto_plugin_proto_goTypes,
		DependencyIndexes: file_pkg_plugin_proto_plugin_proto_depIdxs,
		MessageInfos:      file_pkg_plugin_proto_plugin_proto_msgTypes,
	}.Build()
	File_pkg_plugin_proto_plugin_proto = out.File
	file_pkg_plugin_proto_plugin_proto_rawDesc = nil
	file_pkg_plugin_proto_plugin_proto_goTypes = nil
	file_pkg_plugin_proto_plugin_proto_depIdxs = nil
}
